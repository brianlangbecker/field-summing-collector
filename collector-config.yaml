receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Group spans by trace for proper field summing across spans
  groupbytrace:
    wait_duration: 10s
    num_traces: 100

  # Custom processor to add field summing to spans
  # Note: This requires a custom implementation or script
  # For now, we'll use a simple transform to mark spans
  transform:
    trace_statements:
      - context: span
        statements:
          # Mark spans for post-processing correlation with metrics
          - set(attributes["field_summing_target"], true) where name == "compute.v1.ComputeEngine/getData" 
          - set(attributes["field_summing_source"], true) where name == "data.signal.v1.Signal/read"

  # Filter to only process Signal/read spans for metrics generation
  filter/signal_reads:
    spans:
      include:
        match_type: strict
        span_names: ["data.signal.v1.Signal/read"]
        services: ["datasource-proxy"]

  # Batch processor for performance
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

connectors:
  # Spanmetrics connector to create metrics from Signal/read spans
  spanmetrics:
    histogram:
      disable: false
      unit: ms
      explicit:
        buckets: [2ms, 4ms, 6ms, 8ms, 10ms, 50ms, 100ms, 200ms, 400ms, 800ms, 1s, 1400ms, 2s, 5s, 10s, 15s]
    dimensions:
      - name: trace.trace_id

exporters:
  # Export traces to main Honeycomb dataset
  otlp/honeycomb_traces:
    endpoint: "https://api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      "x-honeycomb-dataset": "traces"
      
  # Export metrics (including field sums) to Honeycomb metrics
  otlp/honeycomb_metrics:
    endpoint: "https://api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      "x-honeycomb-dataset": "field-summing-metrics"
      
  # Debug logging
  debug:
    verbosity: detailed

service:
  pipelines:
    # Main traces pipeline with field summing markers
    traces:
      receivers: [otlp]
      processors: [groupbytrace, transform, batch]
      exporters: [otlp/honeycomb_traces, spanmetrics]
      
    # Signal read aggregation pipeline - creates metrics from Signal/read spans  
    traces/signal_reads:
      receivers: [otlp]
      processors: [groupbytrace, filter/signal_reads]
      exporters: [spanmetrics]
      
    # Metrics pipeline - send field summing metrics to Honeycomb
    metrics:
      receivers: [spanmetrics]
      exporters: [otlp/honeycomb_metrics, debug]